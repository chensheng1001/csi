import pathlib

import pandas


def generate_data_list(data_dir: pathlib.Path, data_count: dict, class_num: int):
    """
    Generate a data_list.hf file that contains the information of whole dataset.

    Shouldn't use it before all grams are generated by MATLAB code.

    :param data_dir: The path to the folder that contains all grams (no sub-folder).
    :param data_count: The number range of every experiment variable.
    :param class_num: The number of classes.
    """
    
    if not data_dir.exists() or not data_dir.is_dir():
        raise FileNotFoundError("Can not find data folder {name}".format(name = data_dir))
    
    erroneous_data = [
            '1-1-1-7-11', '1-1-4-5-8', '1-1-4-5-9', '1-1-4-5-10', '1-1-4-5-11', '1-2-3-2-3',
            '1-3-4-1-15', '1-3-4-1-19', '2-2-1-7-11', '2-5-2-1-17', '2-5-2-2-16', '3-3-2-4-19']
    
    dataset_path = data_dir / 'data_list.hf'
    
    with pandas.HDFStore(str(dataset_path), mode = 'w') as store:
        data = []
        for rom_ind in range(1, data_count['room'] + 1):
            for usr_ind in range(1, data_count['user'] + 1):
                for pos_ind in range(1, data_count['position'] + 1):
                    for act_ind in range(1, class_num + 1):
                        for rep_ind in range(1, data_count['repetition'] + 1):
                            sample_name = str(rom_ind) + '-' + str(usr_ind) + '-' + str(pos_ind) + '-' + str(
                                    act_ind) + '-' + str(rep_ind)
                            
                            # skip erroneous data
                            if sample_name in erroneous_data:
                                print('Skip erroneous data', sample_name)
                                continue
                            
                            sample_name += '.mat'
                            
                            sample_path = data_dir / sample_name
                            if not sample_path.exists() or not sample_path.is_file():
                                raise FileNotFoundError("Can not find sample {name}".format(name = sample_name))
                            
                            # indices in python are expected to start from 0 instead of 1
                            data.append([rom_ind - 1, usr_ind - 1, pos_ind - 1, act_ind - 1, rep_ind - 1, sample_name])
        
        data_frame = pandas.DataFrame(data, columns = ['room', 'user', 'position', 'activity', 'repetition', 'gram'])
        store.put('data', data_frame)
        del data, data_frame
        
        # empty activity samples were collected with user_ind == 1/2 and pos_ind == 1
        data = []
        for rom_ind in range(1, data_count['room'] + 1):
            for usr_ind in range(1, data_count['user'] + 1):
                for rep_ind in range(1, data_count['repetition'] + 1):
                    if not (usr_ind == 1 or (rom_ind == 4 and usr_ind == 2)):
                        continue
                    
                    sample_name = str(rom_ind) + '-' + str(usr_ind) + '-' + str(1) + '-' + str(8) + '-' + str(rep_ind)
                    sample_name += '.mat'
                    
                    sample_path = data_dir / sample_name
                    if not sample_path.exists() or not sample_path.is_file():
                        raise FileNotFoundError("Can not find sample {name}".format(name = sample_name))
                    
                    # indices in python are expected to start from 0 instead of 1
                    data.append([rom_ind - 1, rep_ind - 1, sample_name])
        
        data_frame = pandas.DataFrame(data, columns = ['room', 'repetition', 'gram'])
        store.put('empty', data_frame)
        del data, data_frame
        
        # random activity wasn't collected in room 1
        data = []
        for rom_ind in range(1, data_count['room'] + 1):
            for usr_ind in range(1, data_count['user'] + 1):
                for pos_ind in range(1, data_count['position'] + 1):
                    for rep_ind in range(1, data_count['repetition'] + 1):
                        if rom_ind == 1:
                            # random activity wasn't collected in room 1
                            continue
                        
                        sample_name = str(rom_ind) + '-' + str(usr_ind) + '-' + str(pos_ind) + '-' + str(9) + '-' + str(
                                rep_ind)
                        sample_name += '.mat'
                        
                        sample_path = data_dir / sample_name
                        if not sample_path.exists() or not sample_path.is_file():
                            raise FileNotFoundError("Can not find sample {name}".format(name = sample_name))
                        
                        # indices in python are expected to start from 0 instead of 1
                        data.append([rom_ind - 1, usr_ind - 1, (pos_ind - 1) * data_count['repetition'] + (rep_ind - 1),
                                     sample_name])
        
        data_frame = pandas.DataFrame(data, columns = ['room', 'user', 'repetition', 'gram'])
        store.put('random', data_frame)
        del data, data_frame


if __name__ == '__main__':
    from configs import default_configs as conf
    
    generate_data_list(conf.data_dir, conf.data_count, conf.class_num)
